create or replace PROCEDURE SELECT_EMP_LEVEL3(min_val int, max_val int, whereclause varchar2) AS    Connection_timeout exception;    pragma exception_init(Connection_timeout, -12170);        Invalid_arg exception;    pragma exception_init(Invalid_arg, -12532);        minval int := min_val;    maxval int := max_val;    cursor birthsitescur is select * from birthsites order by minval;    birthsitesval birthsites%rowtype;        type empcurtype is ref cursor;    empcv empcurtype;    emprec employees%rowtype;    sqlstmt varchar2(100);BEGIN    for birthsitesval in birthsitescur     loop        dbms_output.put_line('level 3 taglenames: '||birthsitesval.tablename);        if birthsitesval.tablename='employees' then            dbms_output.put_line('level 3: foumnd emplouyee in birthsite');            if (birthsitesval.minval > maxval) or (birthsitesval.maxval < minval) then --completely outside                dbms_output.put_line('level3 :completely outside can only contirnue');                continue;            end if;                        if (birthsitesval.minval <= minval) and (birthsitesval.maxval >= maxval) then --completely inside                dbms_output.put_line('levele 3 : completely inside fetch and return');                dbms_output.put_line(sqlstmt);                sqlstmt := 'select * from employees'||birthsitesval.birthsitelink||' ' || whereclause||' id>='||minval||' and id<='||maxval;                dbms_output.put_line('level3: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                return;            end if;                        if (birthsitesval.minval > minval) and (not (birthsitesval.maxval < maxval)) then                dbms_output.put_line('level 3: left split - cant be entertained');                sqlstmt := 'select * from employees'||birthsitesval.birthsitelink||' ' ||whereclause||' id>='||minval||' and id<='||maxval;                dbms_output.put_line('level3: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                return; --left split and not right split            end if;                        if (birthsitesval.maxval < maxval) and (not (birthsitesval.minval > minval)) then --only right split                dbms_output.put_line('level3 : rigth split');                  sqlstmt := 'select * from employees'||birthsitesval.birthsitelink||' ' ||whereclause||' id>='||minval||' and id<='||maxval;                dbms_output.put_line('level3: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                minval := birthsitesval.maxval;                continue;            end if;        end if;    end loop;        exception         when Connection_timeout then          dbms_output.put_line('Not able to connect on network!');            when Invalid_arg then          dbms_output.put_line('Not able to connect to network');      return;          END;