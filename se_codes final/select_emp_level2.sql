create or replace PROCEDURE SELECT_EMP_LEVEL2(min_val int, max_val int, whereclause varchar2) AS  cursor copieswithmecur is select * from copieswithme order by minval;  copieswithmecurval copieswithme%rowtype;  minval int := min_val;  maxval int := max_val;  type empcurtype is ref cursor;  empcv empcurtype;  emprec employees%rowtype;  sqlstmt varchar2(100);    new_min int;  new_max int;BEGIN    dbms_output.put_line('reached level2');    for copieswithmecurval in copieswithmecur    loop        if copieswithmecurval.tablename like 'employees%' then            dbms_output.put_line('level2: found some table level 2');            if copieswithmecurval.minval > maxval or copieswithmecurval.maxval < minval then --completely outside                dbms_output.put_line('copies - completely outside');                continue;            end if;                        if (copieswithmecurval.minval <= minval) and (copieswithmecurval.maxval >= maxval) then                dbms_output.put_line('level2: completly inside');                sqlstmt := 'select * from '||copieswithmecurval.tablename||' ' || whereclause||' id>='||minval||' and id<='||maxval;                                       dbms_output.put_line('level2: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                return;            end if;                         if (copieswithmecurval.minval > minval) and (copieswithmecurval.maxval < maxval) then --both splits - left splits                 dbms_output.put_line('level2: copies - both splits');                sqlstmt := 'select * from '||copieswithmecurval.tablename||' ' ||whereclause||' id>='||minval||' and id<='||maxval;                dbms_output.put_line('level2: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                new_max := copieswithmecurval.minval-1;                select_emp_level3(minval, new_max, whereclause);                new_min := copieswithmecurval.maxval+1;                select_emp_level2(new_min, maxval, whereclause);                return;                            end if;                        if (copieswithmecurval.minval > minval) and (not (copieswithmecurval.maxval < maxval)) then --only left split - pass on to next fn                dbms_output.put_line('level2: copies only left split');                sqlstmt := 'select * from '||copieswithmecurval.tablename||' ' ||whereclause||' id>='||minval||' and id<='||maxval;                dbms_output.put_line('level2: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                new_max := copieswithmecurval.minval-1;                select_emp_level3(minval, new_max, whereclause);                return;            end if;                        if (copieswithmecurval.maxval < maxval) and (not (copieswithmecurval.minval > minval)) then --only right split                dbms_output.put_line('level2: only right split');                sqlstmt := 'select * from '||copieswithmecurval.tablename||' where id>='||minval||' and id<='||maxval;                dbms_output.put_line('level2: '||sqlstmt);                open empcv for sqlstmt;                loop                     fetch empcv into emprec;                    exit when empcv%notfound;                    insert into output_employee values(emprec.id, emprec.name, emprec.payscale, emprec.joindate, emprec.enddate, emprec.skills, emprec.salary);                end loop;                close empcv;                minval := copieswithmecurval.maxval + 1;                continue;            end if;        end if;    end loop;    dbms_output.put_line('leve2: minval : '||minval||' maxval: '||maxval||' whereclause: '||whereclause);    select_emp_level3(minval, maxval, whereclause);END;